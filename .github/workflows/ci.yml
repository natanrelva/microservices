name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Fazer checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Configurar Maven Cache para acelerar builds
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4. Construir e testar o projeto com Maven
      - name: Build with Maven
        run: mvn clean install

      # 5. Publicar os relatórios de testes (Surefire Reports)
      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: target/surefire-reports/

      # 6. Publicar relatório de cobertura Jacoco
      - name: Publish Jacoco Coverage Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/

      # 7. Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 8. Logar no Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}

      # 9. Construir a imagem Docker
      - name: Build Docker image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

      # 10. Enviar a imagem Docker para o ECR
      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

      # 11. Atualizar a Task Definition do ECS com a nova imagem
      - name: Update ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
          container-name: produto-service-container
          image: $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

      # 12. Registrar a nova Task Definition
      - name: Register new ECS Task Definition
        id: register-task
        uses: aws-actions/amazon-ecs-register-task-definition@v1
        with:
          family: ${{ secrets.ECS_TASK_DEFINITION }}
          container-definitions: ${{ steps.task-def.outputs.container-definitions }}
          requires-compatibilities: FARGATE
          network-mode: awsvpc
          cpu: "256"
          memory: "512"

      # 13. Atualizar o serviço ECS para usar a nova Task Definition
      - name: Update ECS Service
        uses: aws-actions/amazon-ecs-update-service@v1
        with:
          cluster: ${{ secrets.ECS_CLUSTER }}
          service: ${{ secrets.ECS_SERVICE }}
          task-definition: ${{ steps.register-task.outputs.task-definition-arn }}
          wait-for-service-stability: true
